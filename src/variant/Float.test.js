import { Float } from './index.js'

const signature = 'new Float(key, defaultValue, minValue, maxValue, stepValue)'
test(signature + ' requires arg 1 key to be a non-empty string', () => {
  expect(()=>new Float()).toThrow()
  expect(()=>new Float(1)).toThrow()
  expect(()=>new Float(null)).toThrow()
  expect(()=>new Float({})).toThrow()
  expect(()=>new Float(true)).toThrow()
  expect(()=>new Float('')).toThrow()
})

test(signature + ' requires arg 2 defaultValue to be of type number', () => {
  expect(()=>new Float('FireSpreadRate', '1')).toThrow()
  expect(()=>new Float('FireSpreadRate', true)).toThrow()
  expect(()=>new Float('FireSpreadRate', {})).toThrow()
  expect(()=>new Float('FireSpreadRate', [])).toThrow()
})

test(signature + ' requires arg 3 minValue to be of type number', () => {
  expect(()=>new Float('FireSpreadRate', 5, '0')).toThrow()
  expect(()=>new Float('FireSpreadRate', 5, true)).toThrow()
  expect(()=>new Float('FireSpreadRate', 5, {})).toThrow()
})

test(signature + ' requires arg 4 maxValue to be of type number', () => {
  expect(()=>new Float('FireSpreadRate', 5, 0, '100')).toThrow()
  expect(()=>new Float('FireSpreadRate', 5, 0, true)).toThrow()
  expect(()=>new Float('FireSpreadRate', 5, 0, {})).toThrow()
})

test(signature + ' requires arg 5 stepValue to be of type number', () => {
  expect(()=>new Float('FireSpreadRate', 5, 0, 100, '1')).toThrow()
  expect(()=>new Float('FireSpreadRate', 5, 0, 100, true)).toThrow()
  expect(()=>new Float('FireSpreadRate', 5, 0, 100, {})).toThrow()
})

test('Float default constructor', () => {
  const v = new Float('FireSpreadRate')
  expect(v.defaultValue()).toEqual(0)
  expect(v.minimumValue()).toEqual(1 - Number.MAX_VALUE)
  expect(v.maximumValue()).toEqual(Number.MAX_VALUE)
  expect(v.stepValue()).toEqual(1)
})

test('Float displays fixed values as expected', () => {
  const v = new Float('FireSpreadRate', 0, 0, 1000, 10)
  expect(v.displayValue(123456.789)).toEqual('123456.79')
  expect(v.displayValue(12.34567)).toEqual('12.35')
  expect(v.displayValue(0.00001)).toEqual('0.00')

  v.setDisplayToFixed()
  expect(v.displayValue(1234.56789)).toEqual('1234.57')
  v.setDisplayToFixed(4)
  expect(v.displayValue(0.00001)).toEqual('0.0000')
  expect(v.displayValue(12345678.9)).toEqual('12345678.9000')
  expect(v.displayValue(1234567.89)).toEqual('1234567.8900')
  expect(v.displayValue(123456.789)).toEqual('123456.7890')
  expect(v.displayValue(12345.6789)).toEqual('12345.6789')
  expect(v.displayValue(1234.56789)).toEqual('1234.5679')
  expect(v.displayValue(123.456789)).toEqual('123.4568')
  expect(v.displayValue(12.34567)).toEqual('12.3457')
  expect(v.displayValue(1.234567)).toEqual('1.2346')
  expect(v.displayValue(0.1234567)).toEqual('0.1235')
  expect(v.displayValue(0.01234567)).toEqual('0.0123')
  expect(v.displayValue(0.001234567)).toEqual('0.0012')
  expect(v.displayValue(0.0001234567)).toEqual('0.0001')
  expect(v.displayValue(0.00001234567)).toEqual('0.0000')
  expect(v.displayValue(0.000001234567)).toEqual('0.0000')
  expect(v.displayValue(0.0000001234567)).toEqual('0.0000')

  expect(v.displayString(0.0001234567)).toEqual('0.0001')
  expect(v.minimumDisplayValue()).toEqual('0.0000')
  expect(v.maximumDisplayValue()).toEqual('1000.0000')
  expect(v.defaultDisplayValue()).toEqual('0.0000')
  expect(v.stepDisplayValue()).toEqual('10.0000')
})

test('Float displays exponential values as expected', () => {
  const v = new Float('FireSpreadRate', 0, 0, 1000, 10)

  v.setDisplayToExponential()
  expect(v.displayValue(12345678.9)).toEqual('1.23e+7')
  v.setDisplayToExponential(4)
  expect(v.displayValue(0.00001)).toEqual('1.0000e-5')
  expect(v.displayValue(12345678.9)).toEqual('1.2346e+7')
  expect(v.displayValue(1234567.89)).toEqual('1.2346e+6')
  expect(v.displayValue(123456.789)).toEqual('1.2346e+5')
  expect(v.displayValue(12345.6789)).toEqual('1.2346e+4')
  expect(v.displayValue(1234.56789)).toEqual('1.2346e+3')
  expect(v.displayValue(123.456789)).toEqual('1.2346e+2')
  expect(v.displayValue(12.34567)).toEqual('1.2346e+1')
  expect(v.displayValue(1.234567)).toEqual('1.2346e+0')
  expect(v.displayValue(0.1234567)).toEqual('1.2346e-1')
  expect(v.displayValue(0.01234567)).toEqual('1.2346e-2')
  expect(v.displayValue(0.001234567)).toEqual('1.2346e-3')
  expect(v.displayValue(0.0001234567)).toEqual('1.2346e-4')
  expect(v.displayValue(0.00001234567)).toEqual('1.2346e-5')
  expect(v.displayValue(0.000001234567)).toEqual('1.2346e-6')
  expect(v.displayValue(0.0000001234567)).toEqual('1.2346e-7')

  expect(v.displayString(0.0001234567)).toEqual('1.2346e-4')
  expect(v.minimumDisplayValue()).toEqual('0.0000e+0')
  expect(v.maximumDisplayValue()).toEqual('1.0000e+3')
  expect(v.defaultDisplayValue()).toEqual('0.0000e+0')
  expect(v.stepDisplayValue()).toEqual('1.0000e+1')
})

test('Float displays precision values as expected', () => {
  const v = new Float('FireSpreadRate', 0, 0, 1000, 10)
  v.setDisplayToPrecision()
  expect(v.displayValue(12345678.9)).toEqual('1.2e+7')
  v.setDisplayToPrecision(4)
  expect(v.displayValue(12345678.9)).toEqual('1.235e+7')
  expect(v.displayValue(1234567.89)).toEqual('1.235e+6')
  expect(v.displayValue(123456.789)).toEqual('1.235e+5')
  expect(v.displayValue(12345.6789)).toEqual('1.235e+4')
  expect(v.displayValue(1234.56789)).toEqual('1235')
  expect(v.displayValue(123.456789)).toEqual('123.5')
  expect(v.displayValue(12.34567)).toEqual('12.35')
  expect(v.displayValue(1.234567)).toEqual('1.235')
  expect(v.displayValue(0.1234567)).toEqual('0.1235')
  expect(v.displayValue(0.01234567)).toEqual('0.01235')
  expect(v.displayValue(0.001234567)).toEqual('0.001235')
  expect(v.displayValue(0.0001234567)).toEqual('0.0001235')
  expect(v.displayValue(0.00001234567)).toEqual('0.00001235')
  expect(v.displayValue(0.000001234567)).toEqual('0.000001235')
  expect(v.displayValue(0.0000001234567)).toEqual('1.235e-7')
  expect(v.displayValue(0.00001)).toEqual('0.00001000')

  expect(v.displayString(0.0001234567)).toEqual('0.0001235')
  expect(v.minimumDisplayValue()).toEqual('0.000')
  expect(v.maximumDisplayValue()).toEqual('1000')
  expect(v.defaultDisplayValue()).toEqual('0.000')
  expect(v.stepDisplayValue()).toEqual('10.00')
})


test('Float displays minimumValue', () => {
  const v = new Float('FireSpreadRate', 5, 1, 1000, 10)
  v.setDisplayToFixed(2)
  v.setDisplayDecimals(4)
  expect(v.displayString(123.456789)).toEqual('123.4568')
  expect(v.displayValue(123.456789)).toEqual('123.4568')

  expect(v.minimumDisplayValue()).toEqual('1.0000')
  expect(v.maximumDisplayValue()).toEqual('1000.0000')
  expect(v.defaultDisplayValue()).toEqual('5.0000')
  expect(v.stepDisplayValue()).toEqual('10.0000')

  expect(v.inputHint()).toEqual('1.0000 - 1000.0000')
})

test('isValidValue()', () => {
  const v = new Float('SomeNumber', 1234.56, -1234, 5678, 5)
  expect(v.isValidValue({})).toEqual(false)
  expect(v.isValidValue([])).toEqual(false)
  expect(v.isValidValue('')).toEqual(false)
  expect(v.isValidValue(false)).toEqual(false)
  expect(v.isValidValue(true)).toEqual(false)
})

test('_Variant dummy methods to be reimplemented by subclasses', () => {
  const v = new Float('SomeNumber', 1234.567, -1234, 5678, 5)
  expect(v.key()).toEqual('SomeNumber')
  expect(v.label()).toEqual('Some Number')
  expect(v.defaultValue()).toEqual(1234.567)
  // Overridden by EVERY _Variant subclass
  expect(v.defaultDisplayString()).toEqual('1234.57')
  expect(v.defaultDisplayValue()).toEqual('1234.57')
  expect(v.displayString(123.456)).toEqual('123.46')
  expect(v.displayValue(123.456)).toEqual('123.46')
  expect(v.inputHint()).toEqual('-1234.00 - 5678.00')
  expect(v.isValidInput('anythingAtAll')).toEqual(false)
  expect(v.isValidInput(true)).toEqual(false)
  expect(v.isValidInput('1.23')).toEqual(true)
  expect(v.isValidValue(1.23)).toEqual(true)
  expect(v.isValidValue(-9999)).toEqual(false)
  expect(v.isValidValue(9999)).toEqual(false)
  expect(v.isValidValue({})).toEqual(false)
  expect(v.isValidValue([])).toEqual(false)
  expect(v.isValidValue('')).toEqual(false)
  expect(v.isValidValue(false)).toEqual(false)
  expect(v.isValidValue(true)).toEqual(false)
  // Overriden and final by _Variant => _Numeric
  expect(v.maximumValue()).toEqual(5678)
  expect(v.minimumValue()).toEqual(-1234)
  expect(v.stepValue()).toEqual(5)
  // Overriden and final by _Variant => _Numeric => Float
  expect(v.maximumDisplayValue()).toEqual('5678.00')
  expect(v.minimumDisplayValue()).toEqual('-1234.00')
  expect(v.stepDisplayValue()).toEqual('5.00')
  expect(v.setDisplayDecimals(6)).toEqual(v)
  expect(v._display._decimals).toEqual(6)
  expect(v.setDisplayToExponential()).toEqual(v)
  expect(v._display._decimals).toEqual(6)
  expect(v.setDisplayToPrecision()).toEqual(v)
  expect(v._display._decimals).toEqual(6)
  expect(v.setDisplayToFixed()).toEqual(v)
  expect(v._display._decimals).toEqual(6)
  expect(v.setDisplayDecimals(2)).toEqual(v)
  // Overriden and final by _Variant => _Numeric => Float
  expect(v.displayUnits()).toEqual('')
  expect(v.displayValueToNativeValue('1234.56789')).toEqual(1234.56789)
  expect(v.displayValueToNativeValue(1234.56789)).toEqual(1234.56789)
  expect(v.maximumDisplayString()).toEqual('5678.00')
  expect(v.minimumDisplayString()).toEqual('-1234.00')
  expect(v.nativeUnits()).toEqual('')
  expect(v.nativeValueToDisplayValue(1)).toEqual('1.00')
  expect(v.setDisplayUnits()).toEqual(v)
  // Overridden and final by Option
  expect(v.hasOption('x')).toEqual(false)
  expect(v.options()).toEqual([])
  expect(v.optionText('optionKey')).toEqual('')
  expect(v.optionTexts()).toEqual([])
  expect(v.prompt()).toEqual('-1234.00 - 5678.00')
})
