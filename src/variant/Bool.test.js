import { Bool } from './index.js'

test('new Bool() constructor args', () => {
  expect(()=>new Bool()).toThrow()
  // arg 2 defaultValue must be a boolean
  expect(()=>new Bool('WindLimit')).not.toThrow()
  expect(()=>new Bool('WindLimit', true)).not.toThrow()
  expect(()=>new Bool('WindLimit', 'string')).toThrow()
  expect(()=>new Bool('WindLimit', 1)).toThrow()
  expect(()=>new Bool('WindLimit', {})).toThrow()
  // args 3 'falseText' must be a string
  expect(()=>new Bool('WindLimit', true, 'off')).not.toThrow()
  expect(()=>new Bool('WindLimit', true, {})).toThrow()
  expect(()=>new Bool('WindLimit', true, 1)).toThrow()
  expect(()=>new Bool('WindLimit', true, [])).toThrow()
  expect(()=>new Bool('WindLimit', true, true)).toThrow()
  // args 4 'trueText' must be a string
  expect(()=>new Bool('WindLimit', true, 'off', 'on')).not.toThrow()
  expect(()=>new Bool('WindLimit', true, 'off', {})).toThrow()
  expect(()=>new Bool('WindLimit', true, 'off', 1)).toThrow()
  expect(()=>new Bool('WindLimit', true, 'off', [])).toThrow()
  expect(()=>new Bool('WindLimit', true, 'off', false)).toThrow()
})

test('new Bool() default constructor', () => {
  const v = new Bool('ApplyWindLimit')
  expect(v.key()).toEqual('ApplyWindLimit')
  expect(v.label()).toEqual('Apply Wind Limit')
  expect(v.defaultValue()).toEqual(false)
  expect(v.defaultDisplayValue()).toEqual('false')
  expect(v.defaultDisplayString()).toEqual('false')
  expect(v.options()).toEqual([false, true])
  expect(v.optionTexts()).toEqual(['false', 'true'])
  expect(v.optionText(false)).toEqual('false')
  expect(v.optionText(true)).toEqual('true')
  expect(v.inputHint()).toEqual("'false' or 'true'")
  expect(v.prompt()).toEqual('')
})

test('new Bool() custom constructor', () => {
  const v = new Bool('ApplyWindLimit', true, 'Not Applied', 'Applied', 'Apply wind speed limit?')
  expect(v.key()).toEqual('ApplyWindLimit')
  expect(v.label()).toEqual('Apply Wind Limit')
  expect(v.defaultValue()).toEqual(true)
  expect(v.defaultDisplayValue()).toEqual('Applied')
  expect(v.defaultDisplayString()).toEqual('Applied')
  expect(v.options()).toEqual([false, true])
  expect(v.optionTexts()).toEqual(['Not Applied', 'Applied'])
  expect(v.optionText(false)).toEqual('Not Applied')
  expect(v.optionText(true)).toEqual('Applied')
  expect(v.inputHint()).toEqual("'Not Applied' or 'Applied'")
  expect(v.prompt()).toEqual('Apply wind speed limit?')
})

test('_Variant dummy methods to be reimplemented by subclasses', () => {
  const v = new Bool('ApplyWindLimit', true, 'Not Applied', 'Applied', 'Apply wind speed limit?')
  expect(v.key()).toEqual('ApplyWindLimit')
  expect(v.label()).toEqual('Apply Wind Limit')
  expect(v.defaultValue()).toEqual(true)
  // Overridden by EVERY _Variant subclass
  expect(v.defaultDisplayString()).toEqual('Applied')
  expect(v.defaultDisplayValue()).toEqual('Applied')
  expect(v.displayString(123.456)).toEqual('Applied')
  expect(v.displayValue(123.456)).toEqual('Applied')
  expect(v.inputHint()).toEqual("'Not Applied' or 'Applied'")
  expect(v.isValidInput('anythingAtAll')).toEqual(false)
  expect(v.isValidInput(true)).toEqual(false)
  expect(v.isValidInput('Applied')).toEqual(true)
  expect(v.isValidInput(false)).toEqual(false)
  expect(v.isValidInput('Not Applied')).toEqual(true)
  expect(v.isValidInput('1.23')).toEqual(false)

  expect(v.isValidValue(1.23)).toEqual(true)
  expect(v.isValidValue(-9999)).toEqual(true)
  expect(v.isValidValue(9999)).toEqual(true)
  // Overriden and final by _Variant => _Numeric
  expect(v.maximumValue()).toEqual(true)
  expect(v.minimumValue()).toEqual(false)
  expect(v.stepValue()).toEqual(1)
  // Overriden and final by _Variant => _Numeric => Float
  expect(v.maximumDisplayValue()).toEqual('Applied')
  expect(v.minimumDisplayValue()).toEqual('Not Applied')
  expect(v.stepDisplayValue()).toEqual('')
  expect(v.setDisplayDecimals(9876)).toEqual(v)
  expect(v.setDisplayToExponential()).toEqual(v)
  expect(v.setDisplayToFixed()).toEqual(v)
  expect(v.setDisplayToPrecision()).toEqual(v)
  // Overriden and final by _Variant => _Numeric => Float
  expect(v.displayUnits()).toEqual('')
  expect(v.displayValueToNativeValue(1)).toEqual(1)
  expect(v.maximumDisplayString()).toEqual('Applied')
  expect(v.minimumDisplayString()).toEqual('Not Applied')
  expect(v.nativeUnits()).toEqual('')
  expect(v.nativeValueToDisplayValue(1)).toEqual(1)
  expect(v.setDisplayUnits()).toEqual(v)
  // Overridden and final by Option
  expect(v.hasOption('x')).toEqual(false)
  expect(v.options()).toEqual([false, true])
  expect(v.optionText(false)).toEqual('Not Applied')
  expect(v.optionText(true)).toEqual('Applied')
  expect(v.optionTexts()).toEqual(['Not Applied', 'Applied'])
  expect(v.prompt()).toEqual('Apply wind speed limit?')
})
